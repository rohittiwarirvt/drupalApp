<?php



/**
 * implements hook_entity_info().
 */

function evolent_v2_entity_info() {
  $return['contact_v2'] = array(
    'label' => 'Contact V2',
    'controller class' => 'ContactController',
    'base table' => 'contact_v2',
    'revision table' => 'contact_v2_revision',
    'uri callback' => 'contact_v2_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'cid',
      'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'title'
      ),
    'bundle keys' => array(
      'bundle' => 'type'
      ),
    'static cache' => TRUE,
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
        ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
        )
      )
    );

  foreach (contacts_v2_types() as $type => $info) {
    $return['contact_v2']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/contacts_v2/manage/%contacts_v2_type',
        'real path' => 'admin/structure/contacts_v2/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer contacts v2')
        )
      );
  }
  return $return;
}


/**
 * Entity uri callback.
 *
 */

function contact_v2_uri($contact) {
  return array(
    'path' => 'contact_v2/' . $contact->cid,
    );
}

/**
 * Implements hook_permission().
 *
 */

function evolent_v2_permission() {

  return array(
    'administer contacts v2' => array(
      'title' => t('Administer Contacts V2')
      ),
    'create contacts v2' => array(
      'title' => t('Create Contacts v2')
      ),
    'update contacts v2' => array(
      'title' => t('Update Contacts v2')
      ),
    'view contacts v2' => array(
      'title' => t('View Contacts v2')
      ),
    'delete contacts v2' => array(
      'title' => t('Delete Contacts v2')
      )
    );
}


function contacts_v2_types() {
  $types = &drupal_static(__FUNCTION__);

  if (empty($types)) {
    $types['personal_contact'] = (object)array(
      'type' => 'personal_contact',
      'name' => t('Personal Contact'),
      'description' => t('A Contact of a friend family '),
      );
    $types['commercial_contact'] = (object)array(
      'type' => 'commercial_contact',
      'name' => t('Commercial Contact'),
      'description' => t('A Business, Networking or Lead Contact')
    );
    $types['other_contact'] = (object)array(
      'type' => 'other_contact',
      'name' => t('Other/Misc Contact'),
      'description' => t('A Miscellaneaour or uncategorised contacts')
      );
  }
  return $types;
}


/**
 * Implements hook_menu().
 *
 */

function evolent_v2_menu() {
  $menu = array();

  $menu['admin/structure/contacts_v2'] = array(
    'title' => 'Manage contacts v2',
    'description' => 'Manage Contacts V2',
    'page callback' => 'contacts_v2_overview_types',
    'access arguments' => array('administer contacts v2'),
    'file' => 'evolent_v2.admin.inc'
    );

  $menu['admin/structure/contacts_v2/manage/%contacts_v2_type'] = array(
    'title' => 'View contact type',
    'title callback' => 'contacts_v2_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'contact_v2_information',
    'page arguments' => array(4),
    'access arguments' => array('administer contacts v2'),
    'file' => 'evolent_v2.admin.inc'
  );

  $menu['admin/structure/contacts_v2/manage/%contacts_v2_type/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );


  $menu['contact_v2/add'] = array(
    'title' => 'Add new Contact v2',
    'description' => 'Add new Contact v2',
    'page callback' => 'contacts_v2_add_page',
    'access arguments' => array('create contacts v2'),
    'weight' => 1,
    'menu_name' => 'management',
    'file' => 'evolent_v2.pages.inc'
  );

  foreach (contacts_v2_types() as  $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $menu['contact_v2/add/' . $type_url_str] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'contacts_v2_add',
      'page arguments' => array(2),
      'access arguments' => array('create contacts v2'),
      'description' => $type->description,
      'file' => 'evolent_v2.pages.inc'
    );
  }

  $menu['contact_v2/%contacts_v2'] = array(
    'title callback' => 'contacts_v2_page_title',
    'title arguments' => array(1),
    'page callback' => 'contacts_v2_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view contacts v2'),
    'type' => MENU_CALLBACK,
    'file' => 'evolent_v2.pages.inc'
  );

  $menu['contact_v2/%contacts_v2/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $menu['contact_v2/%contacts_v2/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'contact_v2_page_edit',
    'page arguments' => array(1),
    'access arguments' => array('update contacts v2'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'evolent_v2.pages.inc',
  );

  $menu['contact_v2/%contacts_v2/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contacts_v2_delete_confirm', 1),
    'access arguments' => array('delete contacts v2'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'evolent_v2.pages.inc',
  );
  $menu['contact_v2/recent'] = array(
    'title' => 'Recently added contacts_v2',
    'page callback' => 'contact_v2_page_list_recent',
    'access arguments' => array('view contacts v2'),
    'file' => 'evolent_v2.pages.inc',
  );
  return $menu;
}


/**
 *  Menu title callback.
 *
 *  @param $type
 *    The contact type.
 *  @return  string
 *    The human friendly name of contact
 */


function contacts_v2_type_page_title($type) {
  return t('Manage @type', array('@type' => $type->name));
}


/**
 * Get an individual contact v2 type definition object
 *
 * @param $type
 *   The key of the contact v2 type we want to get
 *
 * @return object
 *   The specified contact type
 */


function contacts_v2_type_load($type) {
  $types = contacts_v2_types();
  $type = str_replace('-', '_', $type);
  return isset($types[$type]) ? $types[$type] : FALSE;
}


/**
 * Load an contact v2 object object from the database.
 * @param $cid
 *   The contact v2 ID.
 * @param $vid
 *   The revision ID.
 * @param $reset
 *   Whether to reset the contact_v2_load_multiple cache.
 *
 * @return
 *   A fully-populated node object.
 */
function contacts_v2_load($cid = NULL, $vid =NULL, $reset = FALSE) {
  $cids = (isset($cid) ? array($cid): array());
  $conditions = (isset($vid) ? array('vid' => $vid) : array());
  $contact_v2 = contact_v2_load_multiple($cids, $conditions, $reset);
  return $contact_v2 ? reset($contact_v2) : FALSE;
}


/**
 * Load contact_v2 entities from the database.
 *
 * This function should be used whenever you need to load more than one contact_v2
 * from the database. Contacts are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @see entity_load()
 *
 * @param $cids
 *   An array of contact v2 IDs.
 * @param $conditions
 *   An array of conditions on the {contact_v2} table in the form 'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return
 *   An array of node objects indexed by nid.
 */
function contact_v2_load_multiple($cids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('contact_v2', $cids, $conditions, $reset);
}


/**
 * Sets the page title based on the specified contact_v2.
 *
 * @param $contact_v2
 *   The contact v2 object.
 */
function contact_v2_page_title($contact_v2) {
  return $contact_v2->title;
}



/**
 * Save an contact_v2.
 *
 * @param $contact_v2
 *   The contact_v2 to be saved.
 * @return
 *   The saved contact_v2, now with an cid if necessary.
 */
function contact_v2_save($contact_v2) {
  return entity_get_controller('contact_v2')->save($contact_v2);
}

/**
 * Returns an initialized contact_v2 object.
 *
 * @param $type
 *   The machine-readable type of the contact_v2.
 *
 * @return
 *   An contact_v2 object with all default fields initialized.
 */
function contact_v2_new($type = '') {
  return entity_get_controller('contact_v2')->create($type);
}


/**
 * Deletes an contact_v2 by ID.
 *
 * @param $cid
 *   The ID of the product to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function contact_v2_delete($cid) {
  return contact_v2_delete_multiple(array($cid));
}

/**
 * Deletes multiple contact_v2s by ID.
 *
 * @param $cids
 *   An array of contact_v2 IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function contact_v2_delete_multiple($cids) {
  return entity_get_controller('contact_v2')->delete($cids);
}



/**
 * Implements hook_forms().
 *
 * All contact_v2 forms share the same form handler.
 */
function evolent_v2_forms() {
  $forms = array();
  if ($types = contacts_v2_types()) {
    foreach (array_keys($types) as $type) {
      $forms[$type . '_contacts_v2_form']['callback'] = 'contact_v2_form';
    }
  }
  return $forms;
}


/**
 * Implements hook_fied_extra_fields().
 */
function evolent_v2_field_extra_fields() {
  $extra = array();

  foreach (contacts_v2_types() as $type) {
    $extra['contact_v2'][$type->type] = array(
      'form' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The title of the contact'),
          'weight' => -5,
        ),
        'first_name' => array(
          'label' => t('First Name'),
          'description' => t('The first name of the contact'),
          'weight' => -4,
        ),
        'last_name' => array(
          'label' => t('Last Name'),
          'description' => t('The last name of the contact'),
          'weight' => -3,
        ),
        'email' => array(
          'label' => t('Email'),
          'description' => t('The email of the contact'),
          'weight' => -2,
        ),
      ),
      'display' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('The title of the contact'),
          'weight' => -5,
        ),
        'first_name' => array(
          'label' => t('First Name'),
          'description' => t('The first name of the contact'),
          'weight' => -4,
        ),
        'last_name' => array(
          'label' => t('Last Name'),
          'description' => t('The last name of the contact'),
          'weight' => -3,
        ),
        'email' => array(
          'label' => t('Email'),
          'description' => t('The email of the contact'),
          'weight' => -2,
        ),
      ),
    );
  }

  return $extra;
}
